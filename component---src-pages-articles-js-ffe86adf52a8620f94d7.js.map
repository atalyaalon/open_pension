{"version":3,"sources":["webpack:///./src/components/Sections/Articles/Articles.js","webpack:///./src/pages/articles.js","webpack:///./src/components/Breadcrumbs/Breadcrumbs.js"],"names":["article","data","className","href","fieldLink","uri","target","rel","title","tags","queryFieldAuthors","entities","map","tag","key","entityLabel","fieldPublishingDate","value","src","fieldImage","gatsbyImageFile","childImageSharp","fluid","alt","ArticleGrid","drupal","nodeQuery","item","Articles","query","render","id","to","articles","ArticlesComponent","charSet","path","paths","homepage","blogs","Breadcrumbs","crumbs","split","index","length","state","fromFeed"],"mappings":"8NA6CMA,EAAU,SAACC,GACf,OAAO,6BACL,wBAAIC,UAAU,SAAQ,uBAAGC,KAAMF,EAAKG,UAAUC,IAAKC,OAAO,SAASC,IAAI,cAAcN,EAAKO,QAC1F,uBAAGN,UAAU,cALHO,EAKqBR,EAAKS,kBAAkBC,SALnC,4BAAKF,EAAKG,KAAI,SAACC,EAAKC,GAAN,OAAc,wBAAIA,IAAKA,GAAMD,EAAIE,kBAKlE,KAAmEd,EAAKe,oBAAoBC,OAC5F,uBAAGd,KAAMF,EAAKG,UAAUC,KAAK,yBAAKa,IAAKjB,EAAKkB,WAAWC,gBAAgBC,gBAAgBC,MAAMJ,IAAKK,IAAKtB,EAAKkB,WAAWI,IAAKrB,UAAU,eAN7H,IAACO,GAUDe,EAAc,SAAC,GAAD,IAAEvB,EAAF,EAAEA,KAAF,OAAY,yBAAKC,UAAU,gBACnDD,EAAKwB,OAAOC,UAAUf,SAASC,KAAI,SAAAe,GAAI,OAAI3B,EAAQ2B,QAoBzCC,EAAW,kBAAM,kBAAC,IAAD,CAAaC,MAtEhC,aAsE8CC,OAAQ,SAAA7B,GAAS,OAjBlD,SAACA,GAAD,OAAU,6BAASC,UAAU,WAAW6B,GAAG,YACjE,yBAAK7B,UAAU,QACb,uBAAGA,UAAU,UAAb,qBAEA,gDAEA,uBAAGA,UAAU,OAAb,iEAIA,kBAACsB,EAAD,CAAavB,KAAMA,IAEnB,kBAAC,IAAD,CAAM+B,GAAG,YAAY9B,UAAU,mBAA/B,oCAK6E+B,CAAShC,IAA5D,W,gFC1E9B,kIA6Ba4B,EAAK,aAsCHK,UAzDW,SAAC,GAAD,IAAEjC,EAAF,EAAEA,KAAF,OAAY,kBAAC,IAAD,KAEpC,yBAAKC,UAAU,cAEb,kBAAC,IAAD,KACE,0BAAMiC,QAAQ,UACd,kEACA,0BAAM5B,IAAI,YAAYJ,KAAK,6CAG7B,kBAAC,IAAD,CAAaiC,KAAK,sBAElB,yBAAKlC,UAAU,WACb,kBAAC,IAAD,CAAaD,KAAMA,S,+HCnBnBoC,EAAQ,CACZC,SAAU,CACR9B,MAAO,YACP4B,KAAM,KAERG,MAAO,CACL/B,MAAO,SACP4B,KAAM,SAERH,SAAU,CACRzB,MAAO,oBACP4B,KAAM,aAGGI,EAAc,SAAC,GAAyB,IAAxBJ,EAAuB,EAAvBA,KAAMrB,EAAiB,EAAjBA,YAC3B0B,EAASL,EAAKM,MAAM,KAE1B,OAAO,wBAAIxC,UAAU,cAClBuC,EAAO7B,KAAI,SAACe,EAAMgB,GACjB,OAAIA,EAAQ,IAAMF,EAAOG,OACV,kBAATjB,EACKZ,EAGF,wBAAID,IAAK6B,EAAOzC,UAAU,SAASmC,EAAMV,GAAMnB,OAGjD,wBAAIM,IAAK6B,EAAOzC,UAAU,SAC/B,kBAAC,IAAD,CACE8B,GAAIK,EAAMV,GAAMS,KAChBS,MAAO,CAACC,UAAU,GAClB5C,UAAU,eACTmC,EAAMV,GAAMnB,OALV,a","file":"component---src-pages-articles-js-ffe86adf52a8620f94d7.js","sourcesContent":["import React from \"react\"\nimport \"./style.scss\";\nimport {graphql, Link, StaticQuery} from \"gatsby\";\n\nconst query = graphql`{\n  drupal {\n    nodeQuery(\n      filter: {conditions: {field: \"type\", value: \"article\"}},\n      limit: 3\n    ) {\n      entities {\n        ... on drupal_NodeArticle {\n          title\n          fieldImage {\n            alt\n            url\n            gatsbyImageFile {\n              childImageSharp {\n                fluid(maxHeight: 300)  {\n                  src\n                }\n              }\n            }\n          }\n          fieldLink {\n            uri\n          }\n          fieldPublishingDate {\n            value\n          }\n          queryFieldAuthors {\n            entities {\n              entityId\n              entityLabel\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nconst tags = (tags) => <ul>{tags.map((tag, key) => <li key={key}>{tag.entityLabel}</li>)}</ul>\n\nconst article = (data) =>  {\n  return <div>\n    <h3 className=\"title\"><a href={data.fieldLink.uri} target=\"_blank\" rel=\"noreferrer\">{data.title}</a></h3>\n    <p className=\"sub-title\">{tags(data.queryFieldAuthors.entities)}, {data.fieldPublishingDate.value}</p>\n    <a href={data.fieldLink.uri}><img src={data.fieldImage.gatsbyImageFile.childImageSharp.fluid.src} alt={data.fieldImage.alt} className=\"bordered\"/></a>\n  </div>\n}\n\nexport const ArticleGrid = ({data}) => <div className=\"grid-display\">\n  {data.drupal.nodeQuery.entities.map(item => article(item))}\n</div>\n\nexport const articles = (data) => <section className=\"articles\" id=\"articles\">\n  <div className=\"text\">\n    <p className=\"medium\">כתבו עלינו בעיתון</p>\n\n    <h2>ובעוד כמה מקומות</h2>\n\n    <p className=\"big\">\n      בואו תראו את כל המקומות שהוזכרנו או שתרמנו חלק משמעותי לתוכן.\n    </p>\n\n    <ArticleGrid data={data}/>\n\n    <Link to=\"/articles\" className=\"big simple-link\">יש עוד כתבות חוץ מזה. תני מבט!</Link>\n  </div>\n\n</section>\n\nexport const Articles = () => <StaticQuery query={query} render={data => {return articles(data)}}>\n\n</StaticQuery>\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport {Helmet} from \"react-helmet\";\n\nimport \"./pages.scss\"\n\nimport {Wrapper} from \"../components/Page\";\nimport {Breadcrumbs} from \"../components/Breadcrumbs/Breadcrumbs\";\nimport {ArticleGrid} from \"../components/Sections/Articles/Articles\";\n\nconst ArticlesComponent = ({data}) => <Wrapper>\n\n  <div className=\"inner-page\">\n\n    <Helmet>\n      <meta charSet=\"utf-8\" />\n      <title>פנסיה פתוחה | כתבו עלינו בעיתון</title>\n      <link rel=\"canonical\" href=\"https://www.openpension.org.il/articles\" />\n    </Helmet>\n\n    <Breadcrumbs path=\"homepage.articles\" />\n\n    <div className=\"content\">\n      <ArticleGrid data={data}/>\n    </div>\n  </div>\n\n</Wrapper>\n\nexport const query = graphql`{\n  drupal {\n    nodeQuery(\n      filter: {conditions: {field: \"type\", value: \"article\"}\n    }) {\n      entities {\n        ... on drupal_NodeArticle {\n          title\n          fieldImage {\n            alt\n            url\n            gatsbyImageFile {\n              childImageSharp {\n                fluid(maxHeight: 300)  {\n                  src\n                }\n              }\n            }\n          }\n          fieldLink {\n            uri\n          }\n          fieldPublishingDate {\n            value\n          }\n          queryFieldAuthors {\n            entities {\n              entityId\n              entityLabel\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nexport default ArticlesComponent\n","import React from \"react\";\nimport \"./style.scss\"\nimport { Link } from \"gatsby\"\n\nconst paths = {\n  homepage: {\n    title: 'עמוד ראשי',\n    path: '/'\n  },\n  blogs: {\n    title: 'בלוגים',\n    path: 'blogs'\n  },\n  articles: {\n    title: 'כתבו עלינו בעיתון',\n    path: 'articles'\n  }\n}\nexport const Breadcrumbs = ({path, entityLabel}) => {\n  const crumbs = path.split('.');\n\n  return <ul className=\"breadcrumb\">\n    {crumbs.map((item, index) => {\n      if (index + 1 === crumbs.length) {\n        if (item === '<entityLabel>') {\n          return entityLabel;\n        }\n\n        return <li key={index} className=\"crumb\">{paths[item].title}</li>\n      }\n\n      return <li key={index} className=\"crumb\">\n        <Link\n          to={paths[item].path}\n          state={{fromFeed: true}}\n          className=\"simple-link\">\n          {paths[item].title}\n        </Link> >>\n      </li>\n    })}\n  </ul>\n}\n\n\n"],"sourceRoot":""}